@model Tuple<int, int>

@{
    int currentPage = Model.Item1;
    int totalPages = Model.Item2;
    
    var request = Context.Request;
    Uri uri = new Uri($"{request.Scheme}://{request.Host}{request.Path}{request.QueryString}");
    string currentUrl = uri.AbsoluteUri;
}

<div class="pagination-box d-flex justify-content-center align-items-center">
    @if (currentPage > 1)
    {
        if (totalPages > 2)
        {
            <button class="pagination-first-page pagination-btn" onclick="window.location.href='@UrlHelper.AddOrUpdateQueryParam(currentUrl, "page", "1")'">
                <img src="~/images/icons/double-chevron-left.png" alt="" class="pagination-icon" />
            </button>
        }

        <button class="pagination-previous pagination-btn" onclick="window.location.href='@UrlHelper.AddOrUpdateQueryParam(currentUrl, "page", Convert.ToString(currentPage - 1))'">
            <img src="~/images/icons/chevron-left.png" alt="" class="pagination-icon" />
        </button>
    }

    <ul class="pagination d-flex align-items-center p-0 m-0">
        @if (totalPages > 1)
        {
            if (totalPages <= 3)
            {
                for (int i = 1; i <= totalPages; i++)
                {
                    <li class="pagination-item @(i == currentPage ? "active" : "")">
                        <a href="@UrlHelper.AddOrUpdateQueryParam(currentUrl, "page", Convert.ToString(i))">@i</a>
                    </li>
                }
            }
            else
            {
                int startPage = currentPage - 1;
                int endPage = currentPage + 1;


                if (startPage > 1)
                {
                    <li class="mx-2">
                        <span>...</span>
                    </li>
                }

                if (currentPage <= 1)
                {
                    startPage = 1;
                    endPage = 3;
                }
                else if (currentPage >= totalPages)
                {
                    startPage = totalPages - 2;
                    endPage = totalPages;
                }

                for (int i = startPage; i <= endPage; i++)
                {
                    <li class="pagination-item @(i == currentPage ? "active" : "")">
                        <a href="@UrlHelper.AddOrUpdateQueryParam(currentUrl, "page", Convert.ToString(i))">@i</a>
                    </li>
                }

                if (endPage < totalPages)
                {
                    <li class="mx-2">
                        <span>...</span>
                    </li>
                }
            }
        }
    </ul>

    @if (currentPage < totalPages)
    {
        <button class="pagination-next pagination-btn" onclick="window.location.href='@UrlHelper.AddOrUpdateQueryParam(currentUrl, "page", Convert.ToString(currentPage + 1))'">
            <img src="~/images/icons/chevron-right.png" alt="" class="pagination-icon" />
        </button>

        if (totalPages > 2)
        {
            <button class="pagination-last-page pagination-btn" onclick="window.location.href='@UrlHelper.AddOrUpdateQueryParam(currentUrl, "page", Convert.ToString(totalPages))'">
                <img src="~/images/icons/double-chevron-right.png" alt="" class="pagination-icon" />
            </button>
        }
    }

</div>